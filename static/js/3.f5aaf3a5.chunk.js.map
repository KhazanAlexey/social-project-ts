{"version":3,"sources":["Components/Forms/AddMessageForm.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","HOC/WithAuthRedirect.tsx","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Posts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Posts/Post/Post.tsx","Components/Profile/MyPosts/Myposts.tsx","Components/Profile/MyPosts/MypostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/Profile-Container.tsx"],"names":["AddMessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","name","validate","maxLength60","component","TextArea","placeholder","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","MapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","restProps","to","module","exports","ProfileStatus","console","log","useState","status","setStatus","editMode","setEditmode","useEffect","className","s","content","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileInfo","profile","src","description","photos","large","small","fullName","contacts","facebook","github","website","JSON","stringify","lookingForAJob","Post","item","message","likeCounts","Myposts","React","memo","dispatch","useDispatch","postElement","posts","map","p","id","postsBlock","formData","addPost","text","reset","MypostsConrainer","profilePage","AddPostAC","Profile","ProfileContainer","userId","match","params","AuthorizaeUserId","history","push","getUserProfile","getUserstatus","compose","withRouter"],"mappings":"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","file":"static/js/3.f5aaf3a5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport { maxLength60, } from \"../../Utils/validators/validator\";\r\nimport {TextArea} from \"../common/FormsControls/TextArea\";\r\n\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'text'}\r\n                       validate={[maxLength60]}\r\n                       component={TextArea} placeholder={\"введите текст\"}/>\r\n            </div>\r\n            <button>Send</button>\r\n\r\n\r\n        </form>\r\n    )\r\n}\r\n/*export const AddMessage=()=>{\r\n    const onSubmit = (formData: TextAreaDataType) => {\r\n\r\n        console.log(formData)\r\n    }\r\n    return (\r\n        <AddMessageReduxForm onSubmit={onSubmit} />\r\n    )\r\n}*/\r\ntype FormDataType = {\r\n    text: string\r\n}\r\nexport const AddMessageReduxForm = reduxForm<FormDataType>({form: 'addmessage'})(AddMessageForm)","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { ComponentType } from 'react';\r\nimport {Redirect} from 'react-router-dom'\r\nimport {RootState} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst MapStateToProps = (state: RootState): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>)  {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        let{isAuth,...restProps}=props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n\r\n    }\r\n\r\n    return connect(MapStateToProps)(RedirectComponent)\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__3yoVe\",\"description\":\"ProfileInfo_description__1PkQC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__37fa4\",\"postsBlock\":\"MyPosts_postsBlock__1vhOv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1T0bk\"};","import React, {useState, useEffect, ChangeEvent} from \"react\";\r\n\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = (props) => {\r\n    console.log(\"ProfileStatus\")\r\n    const [status, setStatus] = useState('')\r\n    const [editMode, setEditmode] = useState(false)\r\n    useEffect(() => {\r\n        console.log('effect satus profile')\r\n        if (props.status !== status)\r\n            setStatus(props.status)\r\n\r\n    }, [props.status])\r\n\r\n    const onClickHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditmode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditmode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    return <div className={s.content}>\r\n        {!editMode &&\r\n        <div>\r\n            <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || \"----\"} </span>\r\n        </div>\r\n        }\r\n        {editMode &&\r\n        <div>\r\n            <input onBlur={deactivateEditMode}\r\n                   onChange={onClickHandler}\r\n                   autoFocus={true}\r\n                   value={status}/>\r\n        </div>\r\n        }\r\n<div> local status {status}</div>\r\n<div>props status {props.status}</div>\r\n    </div>\r\n\r\n}\r\n\r\n// export class ProfileStatus extends React.Component<ProfileStatusType, any> {\r\n//     state = {\r\n//         editmode: false\r\n//     }\r\n//\r\n//     activateEditMode() {\r\n//         this.setState({\r\n//             editmode: true\r\n//         })\r\n//     }\r\n//     deactivateEditMode() {\r\n//         this.setState({\r\n//             editmode: false\r\n//         })\r\n//     }\r\n//     render() {\r\n//         return <div className={s.content}>\r\n//             {!this.state.editmode &&\r\n//             <div>\r\n//                 <span onDoubleClick={this.activateEditMode.bind(this)}>{this.props.status} </span>\r\n//             </div>\r\n//             }\r\n//             {this.state.editmode &&\r\n//             <div>\r\n//                 <input onblur={this.deactivateEditMode.bind(this)} value={this.props.status}/>\r\n//             </div>\r\n//             }\r\n//\r\n//         </div>\r\n\r\n//\r\n//     }\r\n// }","import React from \"react\";\r\n\r\nimport s from './ProfileInfo.module.css'\r\nimport {Prealoader} from \"../../common/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\"\r\ntype ProfilePropsType = {\r\n    profile: any\r\n    status:string\r\n    updateStatus: (status:string) => void\r\n\r\n}\r\nexport const ProfileInfo: React.FC<ProfilePropsType> = (props) => {\r\n    console.log(\"ProfileInfo\")\r\n    if (!props.profile) {\r\n        return <Prealoader/>\r\n    }\r\n    return <div className={s.content}>\r\n\r\n        <div><img src={\"https://cdn.mos.cms.futurecdn.net/BVb3Wzn9orDR8mwVnhrSyd-320-80.jpg\"}/></div>\r\n\r\n\r\n        <div className={s.description}>\r\n            <img src={props.profile.photos.large}/>\r\n            <img src={props.profile.photos.small}/>\r\n\r\n            <div>Full name :{props.profile.fullName}\r\n                <div>{props.profile.contacts.facebook}</div>\r\n                <div>{props.profile.contacts.github}</div>\r\n                <div>{props.profile.contacts.website}</div>\r\n                <div>Looking for a job :{JSON.stringify(props.profile.lookingForAJob)}</div>\r\n               <ProfileStatus status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostType} from \"../../../redux/store\";\r\n\r\nexport const Post: React.FC<PostType> =(props)=> {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://klike.net/uploads/posts/2019-09/medium/1567844265_11.jpeg'/>\r\n            {props.message}\r\n            <div><span>Like: </span>  {props.likeCounts}</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"../../Posts/Post/Post\";\r\nimport { PostType} from \"../../../redux/store\";\r\nimport {AddMessageReduxForm} from \"../../Forms/AddMessageForm\";\r\nimport {reset} from 'redux-form';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport type PostsType = {\r\n    addPost: (text:string) => void\r\n    posts: Array<PostType>\r\n}\r\ntype FormDataType= {\r\n    text: string\r\n}\r\nexport const Myposts=React.memo(\r\n    (props:PostsType) => {\r\n        console.log('my post')\r\n\r\n        const dispatch=useDispatch()\r\n        let postElement = props.posts.map(p => <Post key={p.id} message={p.message} likeCounts={p.likeCounts} id={p.id}/>)\r\n\r\n\r\n\r\n        const onSubmit =  (formData: FormDataType) => {\r\n            props.addPost(formData.text)\r\n            dispatch(reset('addmessage'));\r\n\r\n        }\r\n\r\n        return <div className={s.postsBlock}>\r\n            my posts\r\n\r\n            <AddMessageReduxForm onSubmit={onSubmit} />\r\n\r\n\r\n            <div className={s.posts}>\r\n                {postElement}\r\n\r\n\r\n            </div>\r\n        </div>\r\n    }\r\n)","import React, {ChangeEvent, RefObject} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"../../Posts/Post/Post\";\r\nimport {ActionsTypes, PostType} from \"../../../redux/store\";\r\nimport {AddPostAC, ChangePostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {Myposts, PostsType} from \"./Myposts\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MDTPtype = {\r\n    addPost: (text: string) => void\r\n\r\n}\r\ntype MSTPType = {\r\n    posts: Array<PostType>\r\n}\r\nconst MSTP = (state: RootState) => ({\r\n        posts: state.profilePage.posts,\r\n    }\r\n)\r\n\r\nconst MDTP = (dispatch: any) => {\r\n    return {\r\n        addPost: (text: string) => {\r\n            dispatch(AddPostAC(text))\r\n        },\r\n\r\n    }\r\n}\r\n// <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n\r\n\r\nconst MypostsConrainer = connect<MSTPType, MDTPtype, {}, RootState>(MSTP, MDTP)(Myposts)\r\nexport default MypostsConrainer","import React from \"react\";\r\n\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport MypostsConrainer from \"./MyPosts/MypostsContainer\";\r\n\r\ntype ProfilePropsType = {\r\n    // posts:Array<PostType>\r\n    // newPostText:string\r\n    // dispatch:(action:ActionsTypes)=>void\r\n    profile:any\r\n    status:string\r\n    updateStatus: (status:string)=>void\r\n\r\n}\r\n// export const Profile: React.FC<ProfilePropsType> = (props) => {\r\n//     console.log(\"Profile\")\r\n//     return <div className={s.content}>\r\n//         <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n//         <MypostsConrainer/>\r\n//     </div>\r\n//\r\n// }\r\n\r\nexport const Profile=React.memo(function (props:ProfilePropsType){\r\n\r\n    console.log(\"Profile\")\r\n    return <div className={s.content}>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n        <MypostsConrainer/>\r\n    </div>\r\n\r\n})\r\n","import React, {useEffect} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport {getUserProfile, getUserstatus, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {withAuthRedirect} from '../../HOC/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype ProfilePropsType = MDTPType & MSTPType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n\r\n}\r\n\r\ntype MDTPType = {\r\n    getUserProfile: (userID: string| null) => void\r\n    getUserstatus: (userID: string|null) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype MSTPType = ReturnType<typeof MSTP>\r\ntype ComonPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nconst ProfileContainer=React.memo( function (props: ComonPropsType) {\r\n    console.log(\"ProfileContainer\")\r\n    useEffect(() => {\r\n        let userId:string|null = props.match.params.userId\r\n        if (!userId) {\r\n            userId = props.AuthorizaeUserId\r\n            if(!userId){\r\n                props.history.push(\"/login\")\r\n            }\r\n        }\r\n        console.log(\"use effect\")\r\n        props.getUserProfile(userId)\r\n        props.getUserstatus(userId)\r\n    }, [props.getUserProfile, props.getUserstatus, props.match.params.userId,props.AuthorizaeUserId])\r\n\r\n\r\n    return <div className={s.content}>\r\n        <Profile {...props} profile={props.profile}\r\n                 status={props.status}\r\n                 updateStatus={props.updateStatus}\r\n        />\r\n    </div>\r\n})\r\n\r\n\r\n\r\n\r\nconst MSTP = (state: RootState) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        AuthorizaeUserId: state.auth.id,\r\n        isAuth:state.auth.isAuth\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MSTPType, MDTPType, {}, RootState>(MSTP, {getUserProfile, getUserstatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)\r\n(ProfileContainer)"],"sourceRoot":""}