{"version":3,"sources":["Components/Forms/AddMessageForm.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","HOC/WithAuthRedirect.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["AddMessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","name","validate","maxLength60","component","TextArea","placeholder","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","MapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","restProps","to","Dialogs","React","memo","dialogsElements","dialogs","map","d","id","messagesElement","messages","m","message","className","s","dialogsitem","formData","addMessageAc","text","console","log","compose","dialogsPage"],"mappings":"8GAAA,oFAiCaA,EAAsBC,YAAwB,CAACC,KAAM,cAA/BD,EA1BZ,SAACE,GACpB,OACI,uBAAMC,SAAUD,EAAME,aAAtB,UACI,8BACI,cAAC,IAAD,CAAOC,KAAM,OACNC,SAAU,CAACC,KACXC,UAAWC,IAAUC,YAAa,gFAE7C,iD,8ECdG,SAASC,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDTM,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBV,GAEpD,IAAKG,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCD,EAAMS,EAAiBR,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOM,UAAUC,qBAAqBC,KAAKd,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,E,gCETHW,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAqBC,GAWjC,OAAOC,YAAQN,EAARM,EATmB,SAAC/B,GAAgC,IAEnD2B,EAAqB3B,EAArB2B,OAAUK,EAFwC,EAE7BhC,EAF6B,YAItD,OAAK2B,EACE,cAACG,EAAD,eAAeE,IADF,cAAC,IAAD,CAAUC,GAAI,gB,uHCJ7BC,EAAqCC,IAAMC,MAAM,SAAUpC,GACpE,IAAIqC,EAAkBrC,EAAMsC,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,IAAD,CAAuBrC,KAAMqC,EAAErC,KAAMsC,GAAID,EAAEC,IAA1BD,EAAEC,OAC5DC,EAAkB1C,EAAM2C,SAASJ,KAAI,SAAAK,GAAC,OAAI,cAAC,IAAD,CAAqBH,GAAIG,EAAEH,GAAKI,QAASD,EAAEC,SAA5BD,EAAEH,OAc/D,OAAO,sBAAKK,UAAWC,IAAET,QAAlB,UACH,qBAAKQ,UAAWC,IAAEC,YAAlB,SACKX,IAEL,sBAAKS,UAAWC,IAAEJ,SAAlB,UAEKD,EACD,cAAC,IAAD,CAAqBzC,SAZZ,SAACgD,GACdjD,EAAMkD,aAAaD,EAASE,MAC5BC,QAAQC,IAAIJ,e,yBCSLK,sBACXvB,aAjBS,SAACL,GACV,MAAO,CACHY,QAASZ,EAAM6B,YAAYjB,QAC3BK,SAAUjB,EAAM6B,YAAYZ,YAciB,CAACO,mBAClDrB,IAFWyB,CAEOpB","file":"static/js/4.b968a795.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport { maxLength60, } from \"../../Utils/validators/validator\";\r\nimport {TextArea} from \"../common/FormsControls/TextArea\";\r\n\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'text'}\r\n                       validate={[maxLength60]}\r\n                       component={TextArea} placeholder={\"введите текст\"}/>\r\n            </div>\r\n            <button>Send</button>\r\n\r\n\r\n        </form>\r\n    )\r\n}\r\n/*export const AddMessage=()=>{\r\n    const onSubmit = (formData: TextAreaDataType) => {\r\n\r\n        console.log(formData)\r\n    }\r\n    return (\r\n        <AddMessageReduxForm onSubmit={onSubmit} />\r\n    )\r\n}*/\r\ntype FormDataType = {\r\n    text: string\r\n}\r\nexport const AddMessageReduxForm = reduxForm<FormDataType>({form: 'addmessage'})(AddMessageForm)","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React, { ComponentType } from 'react';\r\nimport {Redirect} from 'react-router-dom'\r\nimport {RootState} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\nconst MapStateToProps = (state: RootState): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>)  {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n\r\n        let{isAuth,...restProps}=props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n\r\n    }\r\n\r\n    return connect(MapStateToProps)(RedirectComponent)\r\n}\r\n","import React, {ChangeEvent,useCallback} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport { DialogType, MessageType} from \"../../redux/store\";\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from \"./Messages/Messages\";\r\nimport {AddMessageReduxForm} from \"../Forms/AddMessageForm\";\r\n\r\n\r\ntype DialogsPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    addMessageAc:(text:string)=>void\r\n    isAuth: boolean\r\n}\r\ntype FormDataType={\r\n    text:string}\r\nexport const Dialogs: React.FC<DialogsPagesType> =React.memo( function (props)  {\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElement = props.messages.map(m => <Message  key={m.id} id={m.id}  message={m.message}/>)\r\n\r\n  // const changeHandler=(e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n  //       if( e.currentTarget)\r\n  //       {\r\n  //           props.changeHandler(e.currentTarget.value)\r\n  //       }\r\n  //   }\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.addMessageAc(formData.text)\r\n        console.log(formData)\r\n    }\r\n\r\n    return <div className={s.dialogs}>\r\n        <div className={s.dialogsitem}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n            {messagesElement}\r\n            <AddMessageReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n\r\n    </div>\r\n})\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {DialogType, MessageType} from \"../../redux/store\";\r\nimport {AddMessageTypeAC, ChangeMessageAc, addMessageAc} from \"../../redux/dialog-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nimport {Dispatch} from 'redux'\r\n\r\n\r\ntype MSTPType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n\r\n}\r\n\r\ntype MDTPType = {\r\n    addMessageAc: (text: string) => void\r\n}\r\n\r\nconst MSTP = (state: RootState) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent=withAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect<MSTPType,MDTPType,{},RootState >(MSTP, MDTP)(AuthRedirectComponent)\r\n//\r\n//\r\n// export default DialogsContainer\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MSTPType, MDTPType, {}, RootState>(MSTP, {addMessageAc}),\r\n    withAuthRedirect)(Dialogs)"],"sourceRoot":""}