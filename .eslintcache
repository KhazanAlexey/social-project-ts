[{"D:\\react\\itincubator\\socialTC\\social-ts\\src\\index.tsx":"1","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\profile-reducer.ts":"2","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Header\\Header.tsx":"3","D:\\react\\itincubator\\socialTC\\social-ts\\src\\App.tsx":"4","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\Myposts.tsx":"5","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\dialog-reducer.ts":"6","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\MypostsContainer.tsx":"7","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Dialogs.tsx":"8","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsContainer.tsx":"9","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Navbar\\Navbar.tsx":"10","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\redux-store.ts":"11","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Posts\\Post\\Post.tsx":"12","D:\\react\\itincubator\\socialTC\\social-ts\\src\\serviceWorker.ts":"13","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile.tsx":"14","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"15","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsItem\\DialogsItem.tsx":"16","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Messages\\Messages.tsx":"17","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users.tsx":"18","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\User-reducer.ts":"19","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users-container.tsx":"20","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsHook.tsx":"21","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\UsersClass.tsx":"22","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\common\\Preloader.tsx":"23","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile-Container.tsx":"24","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\Auth-reducer.ts":"25","D:\\react\\itincubator\\socialTC\\social-ts\\src\\api\\api.ts":"26","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Login\\Login.tsx":"27","D:\\react\\itincubator\\socialTC\\social-ts\\src\\HOC\\WithAuthRedirect.tsx":"28","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\ProfileInfo\\ProfileStatus.tsx":"29"},{"size":656,"mtime":1614022137803,"results":"30","hashOfConfig":"31"},{"size":4535,"mtime":1614759529417,"results":"32","hashOfConfig":"31"},{"size":1068,"mtime":1614021023634,"results":"33","hashOfConfig":"31"},{"size":1344,"mtime":1614022022523,"results":"34","hashOfConfig":"31"},{"size":1170,"mtime":1607262129450,"results":"35","hashOfConfig":"31"},{"size":2396,"mtime":1608164612229,"results":"36","hashOfConfig":"31"},{"size":1180,"mtime":1614022022556,"results":"37","hashOfConfig":"31"},{"size":1699,"mtime":1614029528625,"results":"38","hashOfConfig":"31"},{"size":1397,"mtime":1614755940691,"results":"39","hashOfConfig":"31"},{"size":988,"mtime":1608087432882,"results":"40","hashOfConfig":"31"},{"size":713,"mtime":1615110511546,"results":"41","hashOfConfig":"31"},{"size":422,"mtime":1606645497510,"results":"42","hashOfConfig":"31"},{"size":5295,"mtime":499162500000,"results":"43","hashOfConfig":"31"},{"size":994,"mtime":1614807140498,"results":"44","hashOfConfig":"31"},{"size":1220,"mtime":1614806493003,"results":"45","hashOfConfig":"31"},{"size":383,"mtime":1608087492851,"results":"46","hashOfConfig":"31"},{"size":248,"mtime":1606645497619,"results":"47","hashOfConfig":"31"},{"size":1910,"mtime":1608166423507,"results":"48","hashOfConfig":"31"},{"size":5063,"mtime":1614612604585,"results":"49","hashOfConfig":"31"},{"size":3847,"mtime":1614472523890,"results":"50","hashOfConfig":"31"},{"size":1952,"mtime":1614022812890,"results":"51","hashOfConfig":"31"},{"size":3233,"mtime":1614472338471,"results":"52","hashOfConfig":"31"},{"size":230,"mtime":1609110989099,"results":"53","hashOfConfig":"31"},{"size":1835,"mtime":1614806493046,"results":"54","hashOfConfig":"31"},{"size":1433,"mtime":1615109477154,"results":"55","hashOfConfig":"31"},{"size":1912,"mtime":1614801211637,"results":"56","hashOfConfig":"31"},{"size":811,"mtime":1615112995754,"results":"57","hashOfConfig":"31"},{"size":719,"mtime":1614799103365,"results":"58","hashOfConfig":"31"},{"size":2171,"mtime":1614806493073,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1ogfr1x",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"62"},"D:\\react\\itincubator\\socialTC\\social-ts\\src\\index.tsx",[],["135","136"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\profile-reducer.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Header\\Header.tsx",["137","138"],"import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {getAuthUserData} from \"../../redux/Auth-reducer\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\ntype HeaderPropsType = {}\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n    const login = useSelector<RootState, string | null>(state => state.auth.login)\r\n    const isAuth = useSelector<RootState, boolean>(state => state.auth.isAuth)\r\n    useEffect(() => {\r\n        dispatch(getAuthUserData())\r\n    }, [])\r\n    return (\r\n        <header className={s.header}>\r\n            <img src={\"https://cdn.mos.cms.futurecdn.net/BVb3Wzn9orDR8mwVnhrSyd-320-80.jpg\"}/>\r\n            <div className={s.loginBlock}>\r\n\r\n                {isAuth ? login : <NavLink to={'/login'}>login</NavLink>}\r\n                {/*    <NavLink to={'/login'}>login</NavLink>\r\n    {login}*/}\r\n            </div>\r\n        </header>\r\n    )\r\n\r\n}\r\nexport default Header\r\n\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\App.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\Myposts.tsx",["139","140"],"import React, {ChangeEvent, RefObject} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"../../Posts/Post/Post\";\r\nimport {ActionsTypes, PostType} from \"../../../redux/store\";\r\n\r\nexport type PostsType = {\r\n    newPostText: string\r\n    addPost: () => void\r\n    posts: Array<PostType>\r\n    newposttextHandler: (text: string) => void\r\n}\r\nexport const Myposts: React.FC<PostsType> = (props) => {\r\n\r\n    let postElement = props.posts.map(p => <Post key={p.id} message={p.message} likeCounts={p.likeCounts} id={p.id}/>)\r\n\r\n    function addPost() {\r\n        props.addPost()\r\n    }\r\n\r\n    const newposttextHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (e.currentTarget) {\r\n            props.newposttextHandler(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={s.postsBlock}>\r\n        my posts\r\n        <div>\r\n            <div><textarea value={props.newPostText} onChange={newposttextHandler}/></div>\r\n\r\n            <div>\r\n                <button onClick={addPost}>Addpost</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElement}\r\n\r\n\r\n        </div>\r\n    </div>\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\dialog-reducer.ts",["141"],"import React from 'react';\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type NewMessageType={\r\n    NewDialogMessage:string\r\n\r\n}\r\nexport type DialogsPageType = {\r\n    messages: Array<MessageType>\r\n    NewDialogMessage: string\r\n    dialogs: Array<DialogType>\r\n}\r\nconst ADDPOST=\"ADDPOST\"\r\nconst CHANGEPOSTTEXT=\"CHANGEPOSTTEXT\"\r\nconst ADDMESSAGE=\"ADDMESSAGE\"\r\nconst CHANGEMESSAGE=\"CHANGEMESSAGE\"\r\n\r\nlet initialState: DialogsPageType = {\r\n    NewDialogMessage: \"yu\",\r\n    messages: [\r\n        {id: 1, message: \"hi\"},\r\n        {id: 2, message: \"HOOK\"},\r\n        {id: 3, message: \"itkamasytra\"},\r\n        {id: 4, message: \"yo\"},\r\n        {id: 5, message: \"youuu\"},\r\n        {id: 6, message: \"HOOK\"},\r\n    ],\r\n    dialogs: [\r\n        {id: 1, name: \"Dmitych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Viktor\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ]\r\n\r\n}\r\n\r\nexport type AddPostActionType = {\r\n    type: typeof ADDPOST\r\n}\r\nexport type UpdateTextPost = {\r\n    type: typeof CHANGEPOSTTEXT\r\n    text: string\r\n}\r\n\r\n\r\nexport type AddMessageActionType = {\r\n    type: typeof ADDMESSAGE\r\n}\r\nexport type UpdateTextMessage = {\r\n    type: typeof CHANGEMESSAGE\r\n    text: string\r\n}\r\nexport type ActionsTypes = AddPostActionType | UpdateTextPost | AddMessageActionType | UpdateTextMessage\r\n// export type ActionsTypes = ReturnType<typeof AddMessageTypeAC> | ReturnType<typeof ChangeMessageAc>\r\nexport type returnStateDialogReducerType=typeof initialState\r\nexport const AddMessageTypeAC = () => ({type: \"ADDMESSAGE\"} as const)\r\nexport const ChangeMessageAc = (text: string) => ({type: \"CHANGEMESSAGE\", text: text} as const)\r\n\r\n\r\nexport function dialogReducer(state = initialState, action: ActionsTypes):returnStateDialogReducerType {\r\n    switch (action.type) {\r\n        case \"ADDMESSAGE\":\r\n            const NewMessage: MessageType = {id: 10, message: state.NewDialogMessage}\r\n            return {\r\n                ...state,\r\n                messages:[...state.messages,NewMessage],\r\n                NewDialogMessage:\"\"\r\n            }\r\n\r\n        case \"CHANGEMESSAGE\":\r\n            return {\r\n                ...state,\r\n                NewDialogMessage: action.text\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\MypostsContainer.tsx",["142","143","144","145","146","147","148"],"import React, {ChangeEvent, RefObject} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"../../Posts/Post/Post\";\r\nimport {ActionsTypes, PostType} from \"../../../redux/store\";\r\nimport {AddPostAC, ChangePostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {Myposts, PostsType} from \"./Myposts\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// type PostsType = {\r\n//     // newPostText: string\r\n//     // dispatch: (action: ActionsTypes) => void\r\n//     // posts: Array<PostType>\r\n// }\r\ntype MDTPtype = {\r\n    addPost: () => void\r\n    newposttextHandler: (text: string) => void\r\n\r\n}\r\n// const MypostsConrainer: React.FC<PostsType> = (props) => {\r\n//\r\n//\r\n//     return <>\r\n//\r\n//         <Myposts addPost={addPost} posts={posts}\r\n//                  newPostText={newPostText}\r\n//                  newposttextHandler={newposttextHandler}/>\r\n//\r\n//     </>\r\n// }\r\nconst MSTP = (state: RootState) => ({\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n)\r\ntype MSTPType={\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\nconst MDTP = (dispatch:any) => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(AddPostAC())\r\n        },\r\n        newposttextHandler: (text: string) => {\r\n            dispatch(ChangePostTextAC(text))\r\n        }\r\n    }\r\n}\r\n// <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n\r\n\r\n\r\nconst MypostsConrainer= connect<MSTPType,MDTPtype,{},RootState>(MSTP, MDTP)(Myposts)\r\nexport default MypostsConrainer","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Dialogs.tsx",["149","150","151","152"],"import React, {ChangeEvent,useCallback} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {ActionsTypes, DialogType, MessageType} from \"../../redux/store\";\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from \"./Messages/Messages\";\r\nimport {Route, Switch, Redirect} from 'react-router-dom'\r\n\r\n\r\ntype DialogsPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    NewDialogMessage:string\r\n    onclickHandler:()=>void\r\n    changeHandler:(text:string)=>void\r\n    isAuth: boolean\r\n}\r\nexport const Dialogs: React.FC<DialogsPagesType> =React.memo( function (props)  {\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElement = props.messages.map(m => <Message  key={m.id} id={m.id}  message={m.message}/>)\r\nconst onclickHandler=()=>{\r\n       props.onclickHandler()\r\n}\r\n  // const changeHandler=(e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n  //       if( e.currentTarget)\r\n  //       {\r\n  //           props.changeHandler(e.currentTarget.value)\r\n  //       }\r\n  //   }\r\n    const changeHandler=useCallback((e:ChangeEvent<HTMLTextAreaElement>)=>{ if( e.currentTarget)\r\n    {\r\n        props.changeHandler(e.currentTarget.value)\r\n    }},[props.changeHandler])\r\n\r\nif (!props.isAuth) return <Redirect to={'/login'}/>\r\n    return <div className={s.dialogs}>\r\n        <div className={s.dialogsitem}>\r\n            {dialogsElements}\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n            {messagesElement}\r\n            <div>\r\n                <textarea onChange={changeHandler} value={props.NewDialogMessage} />\r\n            </div>\r\n            <button onClick={onclickHandler}>Send</button>\r\n        </div>\r\n\r\n    </div>\r\n})","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsContainer.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Navbar\\Navbar.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\redux-store.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Posts\\Post\\Post.tsx",["153"],"import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostType} from \"../../../redux/store\";\r\n\r\nexport const Post: React.FC<PostType> =(props)=> {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://klike.net/uploads/posts/2019-09/medium/1567844265_11.jpeg'/>\r\n            {props.message}\r\n            <div><span>Like: </span>  {props.likeCounts}</div>\r\n        </div>\r\n    )\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\serviceWorker.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["154","155","156"],"import React from \"react\";\r\n\r\nimport s from './ProfileInfo.module.css'\r\nimport {Prealoader} from \"../../common/Preloader\";\r\nimport {ProfileStatus} from \"./ProfileStatus\"\r\ntype ProfilePropsType = {\r\n    profile: any\r\n    status:string\r\n    updateStatus: (status:string) => void\r\n\r\n}\r\nexport const ProfileInfo: React.FC<ProfilePropsType> = (props) => {\r\n    console.log(\"ProfileInfo\")\r\n    if (!props.profile) {\r\n        return <Prealoader/>\r\n    }\r\n    return <div className={s.content}>\r\n\r\n        <div><img src={\"https://cdn.mos.cms.futurecdn.net/BVb3Wzn9orDR8mwVnhrSyd-320-80.jpg\"}/></div>\r\n\r\n\r\n        <div className={s.description}>\r\n            <img src={props.profile.photos.large}/>\r\n            <img src={props.profile.photos.small}/>\r\n\r\n            <div>Full name :{props.profile.fullName}\r\n                <div>{props.profile.contacts.facebook}</div>\r\n                <div>{props.profile.contacts.github}</div>\r\n                <div>{props.profile.contacts.website}</div>\r\n                <div>Looking for a job :{JSON.stringify(props.profile.lookingForAJob)}</div>\r\n               <ProfileStatus status={props.status} updateStatus={props.updateStatus} />\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsItem\\DialogsItem.tsx",["157"],"import React from \"react\";\r\nimport s from '../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { DialogType } from \"../../../redux/store\";\r\n\r\nexport const DialogItem: React.FC<DialogType> =(props)=>{\r\n    return  <div className={s.dialog}>\r\n        <NavLink activeClassName={s.active} to={\"/dialogsHook/\"+`${props.id}`}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Messages\\Messages.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users.tsx",["158","159"],"import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {userType} from \"../../redux/User-reducer\";\r\nimport userPhoto from \"../../assets/picture/icons8-user-100.png\";\r\nimport styles from \"./users.module.css\";\r\nimport * as axios from 'axios';\r\ntype propstype={\r\n    users:Array<userType>\r\n    follow: (id:string)=>void\r\n    unfollow: (id:string)=>void\r\n    setUsers: (users:any)=> void\r\n}\r\n\r\n    function Users(props:propstype) {\r\n\r\n        return <div>\r\n            {props.users.map(u => <div key={u.id}>\r\n\r\n                <NavLink to={'/profile/' + u.id}>\r\n                    <div><img\r\n                        src={userPhoto}\r\n                        // src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                              className={styles.photo}\r\n                    />\r\n                    </div>\r\n                </NavLink>\r\n                <div>{u.followed\r\n                    ? <button\r\n                        onClick={()=>{props.unfollow(u.id)}}\r\n                        // disabled={props.followingProgress.some(id => id === u.id)}\r\n                        //       onClick={() => {\r\n                        //           props.unfollowThunk(u.id)\r\n                        //       }}\r\n                    > Unfollow</button>\r\n                    : <button\r\n                        onClick={()=>{props.follow(u.id)}}\r\n                    //     disabled={props.followingProgress.some(id => id === u.id)} onClick={() => {\r\n                    //\r\n                    //     props.followThunk(u.id)\r\n                    //\r\n                    // }}\r\n                    > Follow</button>\r\n                }</div>\r\n                <div>u.fullName</div>\r\n                <div>u.status</div>\r\n                <div>u.location.country</div>\r\n                <div>u.location.city</div>\r\n            </div>)}\r\n\r\n\r\n        </div>\r\n    }\r\n\r\nexport default Users\r\n\r\n",["160","161"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\User-reducer.ts",["162"],"\r\nimport {Dispatch} from \"redux\";\r\nimport {UsersAPI} from \"../api/api\";\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SETUSERS = \"SETUSERS\"\r\nconst SETPAGE = \"SETAPGE\"\r\nconst SETTOTALCOUNT = \"SETTOTALCOUNT\"\r\nconst TOOGLE_IS_FETCHING = \"TOOGLEISFETCHING\"\r\nconst TOOGLE_IS_FOLLOWING_PROGRESS = 'TOOGLE_IS_FOLLOWING_PROGRESS'\r\n\r\ntype TOOGLEISFOLLOWINGPROGRESSType = {\r\n    type: typeof TOOGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    id:number\r\n}\r\ntype SETTOOGLEType = {\r\n    type: typeof TOOGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\ntype SETTOTALCOUNTType = {\r\n    type: typeof SETTOTALCOUNT\r\n    count: number\r\n}\r\ntype SETPAGEType = {\r\n    type: typeof SETPAGE\r\n    page: number\r\n}\r\ntype FOLLOWType = {\r\n    type: typeof FOLLOW\r\n    id: number\r\n}\r\ntype UNFOLLOWType = {\r\n    type: typeof UNFOLLOW\r\n    id: number\r\n}\r\ntype SETUSERSType = {\r\n    type: typeof SETUSERS\r\n    users: any\r\n}\r\n// export type returnStateUserreducerType = ReturnType<typeof initialState>\r\nconst initialState: inittype = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalCount: 100,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingProgress: [] as Array<number>\r\n}\r\nexport type inittype = {\r\n    users: Array<usersTypeRes>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingProgress: Array<any>\r\n}\r\nexport type usersTypeRes = {\r\n\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null | string\r\n    photos: phototype\r\n    status: null | string\r\n    followed: boolean\r\n\r\n}\r\ntype phototype = {\r\n    small: string\r\n    large: string\r\n}\r\nexport  type    userType = {\r\n    id: number\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    location: locationtype\r\n}\r\ntype locationtype = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nlet initialStatetype2 = {\r\n    users: [] as Array<userType>, //user type undefined\r\n    pageSize: 10,\r\n    totalUssrCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingProgress: [] as Array<number>\r\n}\r\nlet initialStateType = typeof initialStatetype2\r\nexport type ActionsTypes = FOLLOWType |\r\n    UNFOLLOWType | SETUSERSType |\r\n    SETPAGEType | SETTOTALCOUNTType |\r\n    SETTOOGLEType | TOOGLEISFOLLOWINGPROGRESSType\r\n// export type ActionsTypes = ReturnType<typeof AddPostAC> | ReturnType<typeof ChangePostTextAС>\r\n\r\nexport const SetCurrentPageAc = (page: number): SETPAGEType =>\r\n    ({type: SETPAGE, page} as const)\r\nexport const FollowAc = (id: number): FOLLOWType =>\r\n    ({type: FOLLOW, id} as const)\r\nexport const UnfollowAc = (id: number): UNFOLLOWType =>\r\n    ({type: UNFOLLOW, id} as const)\r\nexport const SetUsers = (users: any): SETUSERSType =>\r\n    ({type: SETUSERS, users})\r\nexport const setTotalCount = (count: number) =>\r\n    ({type: SETTOTALCOUNT, count} as const)\r\nexport const setToogle = (isFetching: boolean) =>\r\n    ({type: TOOGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleisfolowingProgress = (isFetching: boolean,id:number) =>\r\n    ({type: TOOGLE_IS_FOLLOWING_PROGRESS, isFetching,id} as const)\r\nexport function UserReducer(state: inittype = initialState, action: ActionsTypes): inittype {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n        case \"TOOGLE_IS_FOLLOWING_PROGRESS\": {\r\n            debugger\r\n            return {...state,\r\n                followingProgress: action.isFetching ?\r\n                    [...state.followingProgress, action.id] :\r\n                    [state.followingProgress.filter(u => u.id !== action.id)]\r\n            }\r\n        }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n        case \"SETAPGE\":\r\n            return {\r\n                ...state, currentPage: action.page\r\n            }\r\n        case \"SETUSERS\":\r\n\r\n            return {...state, users: action.users}\r\n        case  \"SETTOTALCOUNT\":\r\n            return {\r\n                ...state, totalCount: action.count\r\n            }\r\n        case \"TOOGLEISFETCHING\": {\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\nexport const getUsersTC=(currentPage:number,pageSize:number)=>{\r\n    return (dispatch: Dispatch)=>{\r\n        dispatch(setToogle(true))\r\n        UsersAPI.getUsers(currentPage,pageSize)\r\n            .then((data) => {\r\n                //isFetching setToogle\r\n                dispatch(setToogle(false))\r\n                dispatch(SetUsers(data.items))\r\n                dispatch(setTotalCount(data.totalCount))\r\n\r\n            })\r\n    }\r\n}\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users-container.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsHook.tsx",["163","164"],"import React, {ChangeEvent, useEffect} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogType, MessageType} from \"../../redux/store\";\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from \"./Messages/Messages\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AddMessageTypeAC, ChangeMessageAc, NewMessageType} from \"../../redux/dialog-reducer\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\n\r\nexport function DialogsHook(props: any) {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const NewDialogMessage = useSelector<RootState, string>(state => state.dialogsPage.NewDialogMessage)\r\n    const dialogs = useSelector<RootState, Array<DialogType>>(state => state.dialogsPage.dialogs)\r\n    const messages = useSelector<RootState, Array<MessageType>>(state => state.dialogsPage.messages)\r\n    const users = useSelector<RootState, any>(state => state.usersPage.users)\r\n    const isAuth = useSelector<RootState, boolean>(state => state.auth.isAuth)\r\n\r\n    let dialogsElements = dialogs.map(d =>\r\n        <DialogItem name={d.name} id={d.id}/>\r\n    )\r\n    let messagesElement = messages.map(m =>\r\n        <Message id={m.id} message={m.message}/>\r\n    )\r\n    const onclickHandler = () => {\r\n        dispatch(AddMessageTypeAC())\r\n    }\r\n    const changeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (e.currentTarget) {\r\n            dispatch(ChangeMessageAc(e.currentTarget.value))\r\n\r\n        }\r\n    }\r\nalert(isAuth)\r\n    return <div className={s.dialogs}>\r\n\r\n        <div className={s.dialogsitem}>\r\n\r\n            {dialogsElements}\r\n            {users}\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n            {messagesElement}\r\n            <div>\r\n                <textarea onChange={changeHandler} value={NewDialogMessage}/>\r\n            </div>\r\n            <button onClick={onclickHandler}>Send</button>\r\n        </div>\r\n        <div>\r\n        </div>\r\n    </div>\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\UsersClass.tsx",["165","166","167"],"import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {toggleisfolowingProgress, usersTypeRes} from \"../../redux/User-reducer\";\r\nimport userPhoto from \"../../assets/picture/icons8-user-100.png\";\r\nimport styles from \"./users.module.css\";\r\nimport {UsersAPI} from \"../../api/api\";\r\n\r\ntype propstype = {\r\n    users: Array<usersTypeRes>\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n    setTotalCount: (count: number) => void\r\n    onPageChanged: (p: number) => void\r\n    followingProgress:Array<number>\r\n    toggleisfolowingProgress: (isFetching: boolean,id:number) => void\r\n}\r\n\r\n\r\nfunction UsersClass(props: propstype) {\r\n//pagination\r\n    let pageCount = Math.ceil(props.totalCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return (\r\n                    <span key={p} onClick={() => {\r\n                        props.onPageChanged(p)\r\n                    }} className={props.currentPage === p ? styles.selected : \"\"}>{p}</span>\r\n                )\r\n            })}\r\n        </div>\r\n        {props.users.map(u => <div key={u.id}>\r\n\r\n            <NavLink to={'/profile/' + u.id}>\r\n                <div><img alt={\"alt img\"}\r\n                          src={u.photos.small || userPhoto}\r\n                          className={styles.photo}\r\n                />\r\n                </div>\r\n            </NavLink>\r\n            <div>{u.followed\r\n                ? <button\r\n                    disabled={props.followingProgress.some(id=>id==u.id)}\r\n                    onClick={() => {\r\n                        props.toggleisfolowingProgress(true,u.id)\r\n                        UsersAPI.Unfollow(u.id)\r\n                            .then(data => {\r\n                                    if (data.resultCode === 0) {\r\n                                        props.unfollow(u.id)\r\n                                    }\r\n                                props.toggleisfolowingProgress(false,u.id)\r\n                                }\r\n                            )\r\n                    }}\r\n                > Unfollow</button>\r\n                : <button\r\n                    disabled={props.followingProgress.some(id=>id==u.id)}\r\n\r\n                    onClick={() => {\r\n                        props.toggleisfolowingProgress(true,u.id)\r\n\r\n                        UsersAPI.Follow(u.id)\r\n                            .then(data => {\r\n                                if (data.resultCode === 0) {\r\n                                    props.follow(u.id)\r\n                                }\r\n                                props.toggleisfolowingProgress(false,u.id)\r\n                            })\r\n                    }}\r\n                > Follow</button>\r\n            }</div>\r\n            <div>name:{u.name}</div>\r\n            <div>{u.followed}</div>\r\n            <div>id:{u.id}</div>\r\n            <div>{u.status}</div>\r\n            <div>city</div>\r\n        </div>)}\r\n    </div>\r\n}\r\n\r\nexport default UsersClass","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\common\\Preloader.tsx",["168"],"import React from \"react\";\r\n\r\nimport preloader from \"../../assets/images/loader2.gif\";\r\n\r\n\r\nexport const Prealoader: React.FC<any>=(props)=>{\r\n\r\n    return (<div style={{backgroundColor:\"white\"}}> <img src={preloader}/> </div>)\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile-Container.tsx",["169"],"import React, {useEffect} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport {getUserProfile, getUserstatus, updateStatus, ProfileType} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport {withAuthRedirect} from '../../HOC/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype ProfilePropsType = MDTPType & MSTPType\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MDTPType = {\r\n    getUserProfile: (userID: string) => void\r\n    getUserstatus: (userID: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype MSTPType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\ntype ComonPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nconst ProfileContainer=React.memo( function (props: ComonPropsType) {\r\n    console.log(ProfileContainer)\r\n    useEffect(() => {\r\n        let userId = props.match.params.userId\r\n        if (!userId) {\r\n            userId = '9600'\r\n        }\r\n        console.log(\"use effect\")\r\n        props.getUserProfile(userId)\r\n        props.getUserstatus(userId)\r\n    }, [props.getUserProfile, props.getUserstatus])\r\n\r\n\r\n    return <div className={s.content}>\r\n        <Profile {...props} profile={props.profile} status={props.status} updateStatus={props.updateStatus}\r\n        />\r\n    </div>\r\n})\r\n\r\n\r\n\r\n\r\nconst MSTP = (state: RootState) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MSTPType, MDTPType, {}, RootState>(MSTP, {getUserProfile, getUserstatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)\r\n(ProfileContainer)","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\Auth-reducer.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\api\\api.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Login\\Login.tsx",["170","171"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\HOC\\WithAuthRedirect.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\ProfileInfo\\ProfileStatus.tsx",["172"],"import React, {useState, useEffect, ChangeEvent} from \"react\";\r\n\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = (props) => {\r\n    console.log(\"ProfileStatus\")\r\n    const [status, setStatus] = useState('')\r\n    const [editMode, setEditmode] = useState(false)\r\n    useEffect(() => {\r\n        console.log('effect satus profile')\r\n        if (props.status !== status)\r\n            setStatus(props.status)\r\n\r\n    }, [props.status])\r\n\r\n    const onClickHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    const activateEditMode = () => {\r\n        setEditmode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n\r\n        setEditmode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    return <div className={s.content}>\r\n        {!editMode &&\r\n        <div>\r\n            <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || \"----\"} </span>\r\n        </div>\r\n        }\r\n        {editMode &&\r\n        <div>\r\n            <input onBlur={deactivateEditMode} onChange={onClickHandler} autoFocus={true} value={status}/>\r\n        </div>\r\n        }\r\n\r\n    </div>\r\n\r\n}\r\n\r\n// export class ProfileStatus extends React.Component<ProfileStatusType, any> {\r\n//     state = {\r\n//         editmode: false\r\n//     }\r\n//\r\n//     activateEditMode() {\r\n//         this.setState({\r\n//             editmode: true\r\n//         })\r\n//     }\r\n//     deactivateEditMode() {\r\n//         this.setState({\r\n//             editmode: false\r\n//         })\r\n//     }\r\n//     render() {\r\n//         return <div className={s.content}>\r\n//             {!this.state.editmode &&\r\n//             <div>\r\n//                 <span onDoubleClick={this.activateEditMode.bind(this)}>{this.props.status} </span>\r\n//             </div>\r\n//             }\r\n//             {this.state.editmode &&\r\n//             <div>\r\n//                 <input onblur={this.deactivateEditMode.bind(this)} value={this.props.status}/>\r\n//             </div>\r\n//             }\r\n//\r\n//         </div>\r\n\r\n//\r\n//     }\r\n// }",{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":15,"column":8,"nodeType":"179","endLine":15,"endColumn":10,"suggestions":"180"},{"ruleId":"181","severity":1,"message":"182","line":18,"column":13,"nodeType":"183","endLine":18,"endColumn":95},{"ruleId":"184","severity":1,"message":"185","line":1,"column":29,"nodeType":"186","messageId":"187","endLine":1,"endColumn":38},{"ruleId":"184","severity":1,"message":"188","line":4,"column":9,"nodeType":"186","messageId":"187","endLine":4,"endColumn":21},{"ruleId":"184","severity":1,"message":"189","line":1,"column":8,"nodeType":"186","messageId":"187","endLine":1,"endColumn":13},{"ruleId":"184","severity":1,"message":"189","line":1,"column":8,"nodeType":"186","messageId":"187","endLine":1,"endColumn":13},{"ruleId":"184","severity":1,"message":"190","line":1,"column":16,"nodeType":"186","messageId":"187","endLine":1,"endColumn":27},{"ruleId":"184","severity":1,"message":"185","line":1,"column":29,"nodeType":"186","messageId":"187","endLine":1,"endColumn":38},{"ruleId":"184","severity":1,"message":"191","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":9},{"ruleId":"184","severity":1,"message":"192","line":3,"column":9,"nodeType":"186","messageId":"187","endLine":3,"endColumn":13},{"ruleId":"184","severity":1,"message":"188","line":4,"column":9,"nodeType":"186","messageId":"187","endLine":4,"endColumn":21},{"ruleId":"184","severity":1,"message":"193","line":6,"column":18,"nodeType":"186","messageId":"187","endLine":6,"endColumn":27},{"ruleId":"184","severity":1,"message":"188","line":3,"column":9,"nodeType":"186","messageId":"187","endLine":3,"endColumn":21},{"ruleId":"184","severity":1,"message":"194","line":6,"column":9,"nodeType":"186","messageId":"187","endLine":6,"endColumn":14},{"ruleId":"184","severity":1,"message":"195","line":6,"column":16,"nodeType":"186","messageId":"187","endLine":6,"endColumn":22},{"ruleId":"177","severity":1,"message":"196","line":32,"column":8,"nodeType":"179","endLine":32,"endColumn":29,"suggestions":"197"},{"ruleId":"181","severity":1,"message":"182","line":8,"column":13,"nodeType":"183","endLine":8,"endColumn":91},{"ruleId":"181","severity":1,"message":"182","line":18,"column":14,"nodeType":"183","endLine":18,"endColumn":96},{"ruleId":"181","severity":1,"message":"182","line":22,"column":13,"nodeType":"183","endLine":22,"endColumn":52},{"ruleId":"181","severity":1,"message":"182","line":23,"column":13,"nodeType":"183","endLine":23,"endColumn":52},{"ruleId":"198","severity":1,"message":"199","line":8,"column":64,"nodeType":"200","messageId":"201","endLine":8,"endColumn":65},{"ruleId":"184","severity":1,"message":"202","line":6,"column":13,"nodeType":"186","messageId":"187","endLine":6,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":20,"column":26,"nodeType":"183","endLine":24,"endColumn":23},{"ruleId":"173","replacedBy":"203"},{"ruleId":"175","replacedBy":"204"},{"ruleId":"184","severity":1,"message":"205","line":94,"column":5,"nodeType":"186","messageId":"187","endLine":94,"endColumn":21},{"ruleId":"184","severity":1,"message":"206","line":1,"column":29,"nodeType":"186","messageId":"187","endLine":1,"endColumn":38},{"ruleId":"184","severity":1,"message":"207","line":7,"column":44,"nodeType":"186","messageId":"187","endLine":7,"endColumn":58},{"ruleId":"184","severity":1,"message":"208","line":3,"column":9,"nodeType":"186","messageId":"187","endLine":3,"endColumn":33},{"ruleId":"209","severity":1,"message":"210","line":52,"column":66,"nodeType":"200","messageId":"211","endLine":52,"endColumn":68},{"ruleId":"209","severity":1,"message":"210","line":66,"column":66,"nodeType":"200","messageId":"211","endLine":66,"endColumn":68},{"ruleId":"181","severity":1,"message":"182","line":8,"column":53,"nodeType":"183","endLine":8,"endColumn":75},{"ruleId":"177","severity":1,"message":"212","line":39,"column":8,"nodeType":"179","endLine":39,"endColumn":51,"suggestions":"213"},{"ruleId":"184","severity":1,"message":"214","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":15},{"ruleId":"215","severity":1,"message":"216","line":3,"column":6,"nodeType":"186","messageId":"217","endLine":3,"endColumn":23},{"ruleId":"177","severity":1,"message":"218","line":18,"column":8,"nodeType":"179","endLine":18,"endColumn":22,"suggestions":"219"},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["222"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'RefObject' is defined but never used.","Identifier","unusedVar","'ActionsTypes' is defined but never used.","'React' is defined but never used.","'ChangeEvent' is defined but never used.","'s' is defined but never used.","'Post' is defined but never used.","'PostsType' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["223"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'axios' is defined but never used.",["220"],["221"],"'initialStateType' is assigned a value but never used.","'useEffect' is defined but never used.","'NewMessageType' is defined but never used.","'toggleisfolowingProgress' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["224"],"'Field' is defined but never used.","@typescript-eslint/no-redeclare","'InjectedFormProps' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'status'. Either include it or remove the dependency array.",["225"],"no-global-assign","no-unsafe-negation",{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"232","fix":"233"},"Update the dependencies array to be: [dispatch]",{"range":"234","text":"235"},"Update the dependencies array to be: [props]",{"range":"236","text":"237"},"Update the dependencies array to be: [props, props.getUserProfile, props.getUserstatus]",{"range":"238","text":"239"},"Update the dependencies array to be: [props.status, status]",{"range":"240","text":"241"},[638,640],"[dispatch]",[1255,1276],"[props]",[1239,1282],"[props, props.getUserProfile, props.getUserstatus]",[530,544],"[props.status, status]"]