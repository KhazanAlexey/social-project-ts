[{"D:\\react\\itincubator\\socialTC\\social-ts\\src\\index.tsx":"1","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\profile-reducer.ts":"2","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Header\\Header.tsx":"3","D:\\react\\itincubator\\socialTC\\social-ts\\src\\App.tsx":"4","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\Myposts.tsx":"5","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\dialog-reducer.ts":"6","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\MypostsContainer.tsx":"7","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Dialogs.tsx":"8","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsContainer.tsx":"9","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Navbar\\Navbar.tsx":"10","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\redux-store.ts":"11","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Posts\\Post\\Post.tsx":"12","D:\\react\\itincubator\\socialTC\\social-ts\\src\\serviceWorker.ts":"13","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile.tsx":"14","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"15","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsItem\\DialogsItem.tsx":"16","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Messages\\Messages.tsx":"17","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users.tsx":"18","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\User-reducer.ts":"19","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users-container.tsx":"20","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsHook.tsx":"21","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\UsersClass.tsx":"22","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\common\\Preloader.tsx":"23","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile-Container.tsx":"24","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\Auth-reducer.ts":"25"},{"size":688,"mtime":1607455723371,"results":"26","hashOfConfig":"27"},{"size":3313,"mtime":1609626163607,"results":"28","hashOfConfig":"27"},{"size":1314,"mtime":1609871311200,"results":"29","hashOfConfig":"27"},{"size":1229,"mtime":1609630189044,"results":"30","hashOfConfig":"27"},{"size":1170,"mtime":1607262129450,"results":"31","hashOfConfig":"27"},{"size":2396,"mtime":1608164612229,"results":"32","hashOfConfig":"27"},{"size":1598,"mtime":1607281722717,"results":"33","hashOfConfig":"27"},{"size":1447,"mtime":1609123465571,"results":"34","hashOfConfig":"27"},{"size":1984,"mtime":1609636292084,"results":"35","hashOfConfig":"27"},{"size":988,"mtime":1608087432882,"results":"36","hashOfConfig":"27"},{"size":569,"mtime":1609633690921,"results":"37","hashOfConfig":"27"},{"size":422,"mtime":1606645497510,"results":"38","hashOfConfig":"27"},{"size":5295,"mtime":499162500000,"results":"39","hashOfConfig":"27"},{"size":618,"mtime":1609123725362,"results":"40","hashOfConfig":"27"},{"size":989,"mtime":1609630356606,"results":"41","hashOfConfig":"27"},{"size":383,"mtime":1608087492851,"results":"42","hashOfConfig":"27"},{"size":248,"mtime":1606645497619,"results":"43","hashOfConfig":"27"},{"size":1910,"mtime":1608166423507,"results":"44","hashOfConfig":"27"},{"size":3727,"mtime":1609109660964,"results":"45","hashOfConfig":"27"},{"size":3556,"mtime":1609114966138,"results":"46","hashOfConfig":"27"},{"size":2342,"mtime":1609636292117,"results":"47","hashOfConfig":"27"},{"size":2063,"mtime":1609110336049,"results":"48","hashOfConfig":"27"},{"size":230,"mtime":1609110989099,"results":"49","hashOfConfig":"27"},{"size":1509,"mtime":1609634500572,"results":"50","hashOfConfig":"27"},{"size":1189,"mtime":1609636932692,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"1ogfr1x",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"55"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"55"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"55"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"55"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"55"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"55"},"D:\\react\\itincubator\\socialTC\\social-ts\\src\\index.tsx",["124"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\nconst state = store.getState()\r\n\r\n\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n        ,\r\n        document.getElementById('root')\r\n    );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n    serviceWorker.unregister();\r\n",["125","126"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\profile-reducer.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Header\\Header.tsx",["127","128","129","130","131","132"],"import React ,{useEffect} from \"react\";\r\nimport { useDispatch,useSelector } from 'react-redux'\r\nimport s from './Header.module.css';\r\nimport {NavLink} from \"react-router-dom\"\r\nimport Axios, {AxiosResponse, AxiosError} from 'axios';\r\nimport {SetuserData} from \"../../redux/Auth-reducer\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\ntype HeaderPropsType={\r\n\r\n}\r\nconst Header: React.FC<HeaderPropsType> =(props)=>{\r\n    const dispatch = useDispatch()\r\n    const login=useSelector<RootState,string>(state => state.auth.login)\r\n    const NewDialogMessage = useSelector<RootState, string>(state => state.dialogsPage.NewDialogMessage)\r\n    useEffect(()=>{\r\n\r\n\r\n        Axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`,\r\n            {withCredentials: true})\r\n\r\n            .then((res) => {\r\n                //isFetching setToogle\r\n                if(res.data.resultCode ===0) {\r\n                    debugger\r\n                    dispatch(SetuserData(res.data.data))\r\n                }\r\n\r\n            })\r\n    },[])\r\n\r\n\r\n   return(\r\n       <header className={s.header}>\r\n  <img src={\"https://cdn.mos.cms.futurecdn.net/BVb3Wzn9orDR8mwVnhrSyd-320-80.jpg\"}/>\r\n<div className={s.loginBlock}>\r\n    <NavLink to={'/login'}>login</NavLink>\r\n\r\n</div>\r\n       </header>\r\n   )\r\n\r\n}\r\nexport default Header\r\n\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\App.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\Myposts.tsx",["133","134"],"import React, {ChangeEvent, RefObject} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"../../Posts/Post/Post\";\r\nimport {ActionsTypes, PostType} from \"../../../redux/store\";\r\n\r\nexport type PostsType = {\r\n    newPostText: string\r\n    addPost: () => void\r\n    posts: Array<PostType>\r\n    newposttextHandler: (text: string) => void\r\n}\r\nexport const Myposts: React.FC<PostsType> = (props) => {\r\n\r\n    let postElement = props.posts.map(p => <Post key={p.id} message={p.message} likeCounts={p.likeCounts} id={p.id}/>)\r\n\r\n    function addPost() {\r\n        props.addPost()\r\n    }\r\n\r\n    const newposttextHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (e.currentTarget) {\r\n            props.newposttextHandler(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={s.postsBlock}>\r\n        my posts\r\n        <div>\r\n            <div><textarea value={props.newPostText} onChange={newposttextHandler}/></div>\r\n\r\n            <div>\r\n                <button onClick={addPost}>Addpost</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElement}\r\n\r\n\r\n        </div>\r\n    </div>\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\dialog-reducer.ts",["135"],"import React from 'react';\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type NewMessageType={\r\n    NewDialogMessage:string\r\n\r\n}\r\nexport type DialogsPageType = {\r\n    messages: Array<MessageType>\r\n    NewDialogMessage: string\r\n    dialogs: Array<DialogType>\r\n}\r\nconst ADDPOST=\"ADDPOST\"\r\nconst CHANGEPOSTTEXT=\"CHANGEPOSTTEXT\"\r\nconst ADDMESSAGE=\"ADDMESSAGE\"\r\nconst CHANGEMESSAGE=\"CHANGEMESSAGE\"\r\n\r\nlet initialState: DialogsPageType = {\r\n    NewDialogMessage: \"yu\",\r\n    messages: [\r\n        {id: 1, message: \"hi\"},\r\n        {id: 2, message: \"HOOK\"},\r\n        {id: 3, message: \"itkamasytra\"},\r\n        {id: 4, message: \"yo\"},\r\n        {id: 5, message: \"youuu\"},\r\n        {id: 6, message: \"HOOK\"},\r\n    ],\r\n    dialogs: [\r\n        {id: 1, name: \"Dmitych\"},\r\n        {id: 2, name: \"Andrey\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Sasha\"},\r\n        {id: 5, name: \"Viktor\"},\r\n        {id: 6, name: \"Valera\"},\r\n    ]\r\n\r\n}\r\n\r\nexport type AddPostActionType = {\r\n    type: typeof ADDPOST\r\n}\r\nexport type UpdateTextPost = {\r\n    type: typeof CHANGEPOSTTEXT\r\n    text: string\r\n}\r\n\r\n\r\nexport type AddMessageActionType = {\r\n    type: typeof ADDMESSAGE\r\n}\r\nexport type UpdateTextMessage = {\r\n    type: typeof CHANGEMESSAGE\r\n    text: string\r\n}\r\nexport type ActionsTypes = AddPostActionType | UpdateTextPost | AddMessageActionType | UpdateTextMessage\r\n// export type ActionsTypes = ReturnType<typeof AddMessageTypeAC> | ReturnType<typeof ChangeMessageAc>\r\nexport type returnStateDialogReducerType=typeof initialState\r\nexport const AddMessageTypeAC = () => ({type: \"ADDMESSAGE\"} as const)\r\nexport const ChangeMessageAc = (text: string) => ({type: \"CHANGEMESSAGE\", text: text} as const)\r\n\r\n\r\nexport function dialogReducer(state = initialState, action: ActionsTypes):returnStateDialogReducerType {\r\n    switch (action.type) {\r\n        case \"ADDMESSAGE\":\r\n            const NewMessage: MessageType = {id: 10, message: state.NewDialogMessage}\r\n            return {\r\n                ...state,\r\n                messages:[...state.messages,NewMessage],\r\n                NewDialogMessage:\"\"\r\n            }\r\n\r\n        case \"CHANGEMESSAGE\":\r\n            return {\r\n                ...state,\r\n                NewDialogMessage: action.text\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\MyPosts\\MypostsContainer.tsx",["136","137","138","139","140","141","142"],"import React, {ChangeEvent, RefObject} from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport {Post} from \"../../Posts/Post/Post\";\r\nimport {ActionsTypes, PostType} from \"../../../redux/store\";\r\nimport {AddPostAC, ChangePostTextAC} from \"../../../redux/profile-reducer\";\r\nimport {Myposts, PostsType} from \"./Myposts\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// type PostsType = {\r\n//     // newPostText: string\r\n//     // dispatch: (action: ActionsTypes) => void\r\n//     // posts: Array<PostType>\r\n// }\r\ntype MDTPtype = {\r\n    addPost: () => void\r\n    newposttextHandler: (text: string) => void\r\n\r\n}\r\n// const MypostsConrainer: React.FC<PostsType> = (props) => {\r\n//\r\n//\r\n//     return <>\r\n//\r\n//         <Myposts addPost={addPost} posts={posts}\r\n//                  newPostText={newPostText}\r\n//                  newposttextHandler={newposttextHandler}/>\r\n//\r\n//     </>\r\n// }\r\nconst MSTP = (state: RootState) => ({\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n)\r\ntype MSTPType={\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\nconst MDTP = (dispatch: any) => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(AddPostAC())\r\n        },\r\n        newposttextHandler: (text: string) => {\r\n            dispatch(ChangePostTextAC(text))\r\n        }\r\n    }\r\n}\r\n// <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n\r\n\r\n\r\nconst MypostsConrainer= connect<MSTPType,MDTPtype,{},RootState>(MSTP, MDTP)(Myposts)\r\nexport default MypostsConrainer","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Dialogs.tsx",["143","144"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {ActionsTypes, DialogType, MessageType} from \"../../redux/store\";\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from \"./Messages/Messages\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\n\r\ntype DialogsPagesType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    NewDialogMessage:string\r\n    onclickHandler:()=>void\r\n    changeHandler:(text:string)=>void\r\n}\r\n\r\n\r\nexport const Dialogs: React.FC<DialogsPagesType> = (props) => {\r\n\r\n\r\n\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n    let messagesElement = props.messages.map(m => <Message  key={m.id} id={m.id}  message={m.message}/>)\r\nconst onclickHandler=()=>{\r\n       props.onclickHandler()\r\n}\r\n  const changeHandler=(e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n        if( e.currentTarget)\r\n        {\r\n            props.changeHandler(e.currentTarget.value)\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={s.dialogs}>\r\n\r\n        <div className={s.dialogsitem}>\r\n\r\n            {dialogsElements}\r\n\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n            {messagesElement}\r\n            <div>\r\n                <textarea onChange={changeHandler} value={props.NewDialogMessage} />\r\n            </div>\r\n            <button onClick={onclickHandler}>Send</button>\r\n        </div>\r\n\r\n    </div>\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsContainer.tsx",["145","146","147","148","149","150","151","152"],"import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {ActionsTypes, DialogType, MessageType, StoreType} from \"../../redux/store\";\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from \"./Messages/Messages\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport {AddMessageTypeAC, ChangeMessageAc} from \"../../redux/dialog-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\ntype DialogsPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    NewDialogMessage: string\r\n    dispatch: (action: ActionsTypes) => void\r\n\r\n}\r\n\r\n\r\n/*export const DialogsContainer: React.FC<DialogsPageType> = (props) => {\r\n\r\n    const onclickHandler = () => {\r\n        props.dispatch(AddMessageTypeAC())\r\n    }\r\n    const changeHandler = (text: string) => {\r\n\r\n        props.dispatch(ChangeMessageAc(text))\r\n\r\n    }\r\n\r\n\r\n    return <>\r\n        <Dialogs dialogs={props.dialogs}\r\n                 messages={props.messages}\r\n                 NewDialogMessage={props.NewDialogMessage}\r\n                 onclickHandler={onclickHandler}\r\n                 changeHandler={changeHandler}\r\n        />\r\n    </>\r\n}*/\r\ntype MSTPType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>,\r\n    NewDialogMessage: string\r\n}\r\n\r\ntype MDTPType = {\r\n    onclickHandler: () => void\r\n    changeHandler: (text: string) => void\r\n}\r\nconst MSTP = (state: RootState) => ({\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    NewDialogMessage: state.dialogsPage.NewDialogMessage\r\n})\r\n\r\nconst MDTP = (dispatch: any) => ({\r\n    onclickHandler: () => {\r\n        dispatch(AddMessageTypeAC())\r\n    },\r\n    changeHandler: (text: string) => {\r\n        dispatch(ChangeMessageAc(text))\r\n    }\r\n})\r\n\r\nconst DialogsContainer = connect<MSTPType,MDTPType,{},RootState >(MSTP, MDTP)(Dialogs)\r\nexport default DialogsContainer","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Navbar\\Navbar.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\redux-store.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Posts\\Post\\Post.tsx",["153"],"import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostType} from \"../../../redux/store\";\r\n\r\nexport const Post: React.FC<PostType> =(props)=> {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://klike.net/uploads/posts/2019-09/medium/1567844265_11.jpeg'/>\r\n            {props.message}\r\n            <div><span>Like: </span>  {props.likeCounts}</div>\r\n        </div>\r\n    )\r\n}",["154","155"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\serviceWorker.ts",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile.tsx",["156","157","158"],"import React from \"react\";\r\n\r\nimport s from './Profile.module.css'\r\nimport {Myposts} from \"./MyPosts/Myposts\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ActionsTypes, PostType} from \"../../redux/store\";\r\nimport MypostsConrainer from \"./MyPosts/MypostsContainer\";\r\ntype ProfilePropsType={\r\n    // posts:Array<PostType>\r\n    // newPostText:string\r\n    // dispatch:(action:ActionsTypes)=>void\r\n    profile:any\r\n\r\n}\r\nexport const Profile: React.FC<ProfilePropsType>=(props)=> {\r\n\r\n\r\nreturn <div className={s.content}>\r\n    <ProfileInfo profile={props.profile}/>\r\n    <MypostsConrainer/>\r\n</div>\r\n\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["159","160","161"],"import React from \"react\";\r\n\r\nimport s from './ProfileInfo.module.css'\r\nimport {Prealoader} from \"../../common/Preloader\";\r\nimport { ProfileType } from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n}\r\nexport const ProfileInfo: React.FC<ProfilePropsType> = (props) => {\r\n    if (!props.profile) {\r\n        return <Prealoader/>\r\n    }\r\n    return <div className={s.content}>\r\n\r\n        <div><img src={\"https://cdn.mos.cms.futurecdn.net/BVb3Wzn9orDR8mwVnhrSyd-320-80.jpg\"}/></div>\r\n\r\n\r\n        <div className={s.description}>\r\n            <img src={props.profile.photos.large}/>\r\n            <img src={props.profile.photos.small}/>\r\n\r\n            <div>{props.profile.fullName}\r\n                <div>{props.profile.contacts.facebook}</div>\r\n                <div>{props.profile.contacts.github}</div>\r\n                <div>{props.profile.contacts.website}</div>\r\n                ava + discrtptoi\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsItem\\DialogsItem.tsx",["162"],"import React from \"react\";\r\nimport s from '../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { DialogType } from \"../../../redux/store\";\r\n\r\nexport const DialogItem: React.FC<DialogType> =(props)=>{\r\n    return  <div className={s.dialog}>\r\n        <NavLink activeClassName={s.active} to={\"/dialogsHook/\"+`${props.id}`}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\Messages\\Messages.tsx",[],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users.tsx",["163","164"],"import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {userType} from \"../../redux/User-reducer\";\r\nimport userPhoto from \"../../assets/picture/icons8-user-100.png\";\r\nimport styles from \"./users.module.css\";\r\nimport * as axios from 'axios';\r\ntype propstype={\r\n    users:Array<userType>\r\n    follow: (id:string)=>void\r\n    unfollow: (id:string)=>void\r\n    setUsers: (users:any)=> void\r\n}\r\n\r\n    function Users(props:propstype) {\r\n\r\n        return <div>\r\n            {props.users.map(u => <div key={u.id}>\r\n\r\n                <NavLink to={'/profile/' + u.id}>\r\n                    <div><img\r\n                        src={userPhoto}\r\n                        // src={u.photos.small != null ? u.photos.small : userPhoto}\r\n                              className={styles.photo}\r\n                    />\r\n                    </div>\r\n                </NavLink>\r\n                <div>{u.followed\r\n                    ? <button\r\n                        onClick={()=>{props.unfollow(u.id)}}\r\n                        // disabled={props.followingProgress.some(id => id === u.id)}\r\n                        //       onClick={() => {\r\n                        //           props.unfollowThunk(u.id)\r\n                        //       }}\r\n                    > Unfollow</button>\r\n                    : <button\r\n                        onClick={()=>{props.follow(u.id)}}\r\n                    //     disabled={props.followingProgress.some(id => id === u.id)} onClick={() => {\r\n                    //\r\n                    //     props.followThunk(u.id)\r\n                    //\r\n                    // }}\r\n                    > Follow</button>\r\n                }</div>\r\n                <div>u.fullName</div>\r\n                <div>u.status</div>\r\n                <div>u.location.country</div>\r\n                <div>u.location.city</div>\r\n            </div>)}\r\n\r\n\r\n        </div>\r\n    }\r\n\r\nexport default Users\r\n\r\n",["165","166"],"D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\User-reducer.ts",["167"],"const FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SETUSERS = \"SETUSERS\"\r\nconst SETPAGE = \"SETAPGE\"\r\nconst SETTOTALCOUNT= \"SETTOTALCOUNT\"\r\nconst TOOGLE_IS_FETCHING= \"TOOGLEISFETCHING\"\r\n\r\ntype SETTOOGLEType={\r\n    type: typeof TOOGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\ntype SETTOTALCOUNTType={\r\n    type: typeof SETTOTALCOUNT\r\n    count:number\r\n}\r\ntype SETPAGEType = {\r\n    type: typeof SETPAGE\r\n    page: number\r\n}\r\ntype FOLLOWType = {\r\n    type: typeof FOLLOW\r\n    id: string\r\n}\r\ntype UNFOLLOWType = {\r\n    type: typeof UNFOLLOW\r\n    id: string\r\n}\r\ntype SETUSERSType = {\r\n    type: typeof SETUSERS\r\n    users: any\r\n}\r\n// export type returnStateUserreducerType = ReturnType<typeof initialState>\r\nconst initialState: inittype = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalCount: 100,\r\n    currentPage: 2,\r\n    isFetching: true\r\n}\r\nexport type inittype = {\r\n    users: Array<usersTypeRes>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\nexport type usersTypeRes = {\r\n\r\n    name: string\r\n    id: string\r\n    uniqueUrlName: null | string\r\n    photos: phototype\r\n    status: null | string\r\n    followed: boolean\r\n\r\n}\r\ntype phototype = {\r\n    small: string\r\n    large: string\r\n}\r\nexport  type    userType = {\r\n    id: string\r\n    followed: boolean\r\n    fullName: string\r\n    status: string\r\n    location: locationtype\r\n}\r\ntype locationtype = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nlet initialStatetype2 = {\r\n    users: [] as Array<userType>, //user type undefined\r\n    pageSize: 10,\r\n    totalUssrCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingProgress: [] as Array<number>\r\n}\r\nlet initialStateType = typeof initialStatetype2\r\nexport type ActionsTypes = FOLLOWType | UNFOLLOWType | SETUSERSType | SETPAGEType |SETTOTALCOUNTType | SETTOOGLEType\r\n// export type ActionsTypes = ReturnType<typeof AddPostAC> | ReturnType<typeof ChangePostTextAС>\r\n\r\nexport const SetCurrentPageAc = (page: number): SETPAGEType =>\r\n    ({type: SETPAGE, page} as const)\r\nexport const FollowAc = (id: string): FOLLOWType =>\r\n    ({type: FOLLOW, id} as const)\r\nexport const UnfollowAc = (id: string): UNFOLLOWType =>\r\n    ({type: UNFOLLOW, id} as const)\r\nexport const SetUsers = (users: any): SETUSERSType =>\r\n    ({type: SETUSERS, users})\r\nexport const setTotalCount= (count:number) =>\r\n    ({type: SETTOTALCOUNT, count} as const)\r\nexport const setToogle= (isFetching:boolean)=>\r\n    ({type: TOOGLE_IS_FETCHING, isFetching} as const)\r\n\r\nexport function UserReducer(state: inittype = initialState, action: ActionsTypes): inittype {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n\r\n\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state, users: [...state.users.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })]\r\n            }\r\n        case \"SETAPGE\":\r\n            return {\r\n                ...state, currentPage: action.page\r\n            }\r\n        case \"SETUSERS\":\r\n\r\n            return {...state, users: action.users}\r\n        case  \"SETTOTALCOUNT\":\r\n            return {\r\n                ...state,totalCount:action.count\r\n            }\r\n        case \"TOOGLEISFETCHING\":{\r\n            return {...state,isFetching:action.isFetching\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\n\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\Users-container.tsx",["168","169"],"import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    FollowAc,\r\n    SetCurrentPageAc, setToogle,\r\n    setTotalCount,\r\n    SetUsers,\r\n    UnfollowAc,\r\n    usersTypeRes\r\n} from \"../../redux/User-reducer\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport UsersClass from \"./UsersClass\";\r\nimport Axios, {AxiosResponse, AxiosError} from 'axios';\r\nimport {Prealoader} from \"../common/Preloader\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype MSTPType = {\r\n    users: Array<usersTypeRes>\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n\r\n}\r\ntype MDTPType = {\r\n    follow: (id: string) => void\r\n    unfollow: (id: string) => void\r\n    setUsers: (users: any) => void\r\n    setCurrentPage: (page: number) => void\r\n    setTotalCount: (count: number) => void\r\n    setToogle: (isFetching: boolean) => void\r\n\r\n\r\n}\r\n\r\n\r\ntype propstype = {\r\n    users: Array<usersTypeRes>\r\n    follow: (id: string) => void\r\n    unfollow: (id: string) => void\r\n    setUsers: (users: any) => void\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n    setTotalCount: (count:number)=> void\r\n    isFetching: boolean\r\n    setToogle: (isFetching: boolean) => void\r\n}\r\n\r\n\r\nclass UsersContainer extends React.Component<propstype, any> {\r\n    componentDidMount() {\r\n        this.props.setToogle(true)\r\n\r\n        Axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n\r\n            .then((res) => {\r\n                //isFetching setToogle\r\n                this.props.setToogle(false)\r\n                this.props.setUsers(res.data.items)\r\n                this.props.setTotalCount(res.data.totalCount)\r\n\r\n            })\r\n\r\n\r\n    }\r\n\r\n    onPageChanged = (p: number) => {\r\n        this.props.setCurrentPage(p)\r\n        this.props.setToogle(true)\r\n        Axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${p}&count=${this.props.pageSize}`)\r\n            .then((res) => {\r\n                this.props.setToogle(false)\r\n                this.props.setUsers(res.data.items)\r\n\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return  <>\r\n            {this.props.isFetching? <Prealoader />:  <div>\r\n                <UsersClass users={this.props.users}\r\n                            onPageChanged={this.onPageChanged}\r\n                            follow={this.props.follow}\r\n                            unfollow={this.props.follow}\r\n                            setUsers={this.props.setUsers}\r\n                            pageSize={this.props.pageSize}\r\n                            totalCount={this.props.totalCount}\r\n                            currentPage={this.props.currentPage}\r\n                            setCurrentPage={this.props.setCurrentPage}\r\n                            setTotalCount={this.props.setTotalCount}\r\n                />\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>}\r\n\r\n            </>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst MSTP = (state: RootState) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalCount: state.usersPage.totalCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect<MSTPType, MDTPType, {}, RootState>(MSTP,\r\n    {follow:FollowAc  ,\r\n        unfollow:UnfollowAc,\r\n        setUsers:SetUsers,\r\n        setCurrentPage:SetCurrentPageAc,\r\n        setTotalCount:setTotalCount,\r\n        setToogle:setToogle})(UsersContainer)\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Dialogs\\DialogsHook.tsx",["170","171","172","173","174","175","176","177","178"],"import React, {ChangeEvent, useEffect} from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport {DialogType, MessageType} from \"../../redux/store\";\r\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\r\nimport {Message} from \"./Messages/Messages\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AddMessageTypeAC, ChangeMessageAc, NewMessageType} from \"../../redux/dialog-reducer\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport Axios from \"axios\";\r\nimport {setTotalCount, SetUsers, userType} from \"../../redux/User-reducer\";\r\n\r\ntype DialogsPagesType = {\r\n    /*dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    NewDialogMessage:string\r\n    onclickHandler:()=>void\r\n    changeHandler:(text:string)=>void*/\r\n}\r\n\r\nexport function DialogsHook(props: any) {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const NewDialogMessage = useSelector<RootState, string>(state => state.dialogsPage.NewDialogMessage)\r\n    const dialogs = useSelector<RootState, Array<DialogType>>(state => state.dialogsPage.dialogs)\r\n    const messages = useSelector<RootState, Array<MessageType>>(state => state.dialogsPage.messages)\r\nconst currentPage=useSelector<RootState,number>(state=> state.usersPage.currentPage)\r\n    const pageSize=useSelector<RootState,number>(state=> state.usersPage.pageSize)\r\nconst users= useSelector<RootState,any>(state=> state.usersPage.users)\r\n   /* useEffect (()=>{\r\n        Axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${currentPage}&count=${pageSize}`)\r\n        .then(res => {\r\n            dispatch(SetUsersAC(res.data.items))\r\n            dispatch(setTotalCount(res.data.totalCount))\r\n\r\n        },[])\r\n\r\n    })*/\r\n\r\n    let dialogsElements = dialogs.map(d =>\r\n        <DialogItem name={d.name} id={d.id}/>\r\n    )\r\n    let messagesElement = messages.map(m =>\r\n        <Message id={m.id} message={m.message}/>\r\n    )\r\n    const onclickHandler = () => {\r\n        dispatch(AddMessageTypeAC())\r\n    }\r\n    const changeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (e.currentTarget) {\r\n            dispatch(ChangeMessageAc(e.currentTarget.value))\r\n\r\n        }\r\n    }\r\n\r\n    return <div className={s.dialogs}>\r\n\r\n        <div className={s.dialogsitem}>\r\n\r\n            {dialogsElements}\r\n            {users}\r\n        </div>\r\n        <div className={s.messages}>\r\n\r\n            {messagesElement}\r\n            <div>\r\n                <textarea onChange={changeHandler} value={NewDialogMessage}/>\r\n            </div>\r\n            <button onClick={onclickHandler}>Send</button>\r\n        </div>\r\n\r\n        <div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n\r\n    </div>\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Users\\UsersClass.tsx",["179"],"import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {usersTypeRes} from \"../../redux/User-reducer\";\r\nimport userPhoto from \"../../assets/picture/icons8-user-100.png\";\r\nimport styles from \"./users.module.css\";\r\n\r\ntype propstype = {\r\n    users: Array<usersTypeRes>\r\n    follow: (id: string) => void\r\n    unfollow: (id: string) => void\r\n    setUsers: (users: any) => void\r\n    pageSize: number\r\n    totalCount: number\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n    setTotalCount: (count:number)=> void\r\n    onPageChanged:(p:number)=>void\r\n}\r\n\r\n\r\nfunction UsersClass(props: propstype) {\r\n//pagination\r\n    let pageCount = Math.ceil(props.totalCount / props.pageSize)\r\n\r\n    let pages = []\r\n    for (let i = 0; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n\r\n        <div>\r\n            {pages.map(p => {\r\n                return (\r\n                    <span onClick={(e) => {\r\n                        props.onPageChanged(p)\r\n                    }} className={props.currentPage === p ? styles.selected : \"\"}>{p}</span>\r\n                )\r\n            })}\r\n        </div>\r\n\r\n        {props.users.map(u => <div key={u.id}>\r\n\r\n            <NavLink to={'/profile/' + u.id}>\r\n                <div><img\r\n                    src={u.photos.small || userPhoto}\r\n                    className={styles.photo}\r\n                />\r\n                </div>\r\n            </NavLink>\r\n            <div>{u.followed\r\n                ? <button\r\n                    onClick={() => {\r\n                        props.unfollow(u.id)\r\n                    }}\r\n                > Unfollow</button>\r\n                : <button\r\n                    onClick={() => {\r\n                        props.follow(u.id)\r\n                    }}\r\n                > Follow</button>\r\n            }</div>\r\n            <div>name:{u.name}</div>\r\n            <div>{u.followed}</div>\r\n            <div>id:{u.id}</div>\r\n            <div>{u.status}</div>\r\n            <div>city</div>\r\n        </div>)}\r\n    </div>\r\n}\r\n\r\nexport default UsersClass","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\common\\Preloader.tsx",["180"],"import React from \"react\";\r\n\r\nimport preloader from \"../../assets/images/loader2.gif\";\r\n\r\n\r\nexport const Prealoader: React.FC<any>=(props)=>{\r\n\r\n    return (<div style={{backgroundColor:\"white\"}}> <img src={preloader}/> </div>)\r\n}","D:\\react\\itincubator\\socialTC\\social-ts\\src\\Components\\Profile\\Profile-Container.tsx",["181","182","183","184","185"],"\r\nimport React, { useEffect } from 'react'\r\nimport Axios, {AxiosResponse, AxiosError} from 'axios';\r\nimport s from './Profile.module.css'\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../redux/redux-store\";\r\nimport {ProfileType, setUserProfile} from \"../../redux/profile-reducer\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\n\r\n\r\ntype ProfilePropsType= MDTPType & MSTPType\r\n\r\ntype PathParamsType={\r\n    userId: string\r\n}\r\n\r\ntype MDTPType={\r\n    setUserProfile: (profile:any)=>void\r\n}\r\ntype MSTPType={\r\n    profile: any\r\n}\r\ntype ComonPropsType=RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\n\r\nfunction ProfileContainer(props:ComonPropsType) {\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        let userId=props.match.params.userId\r\n        if(!userId){\r\n            userId='2'\r\n        }\r\n        Axios.get(`https://social-network.samuraijs.com/api/1.0/profile/${userId}`)\r\n\r\n            .then((res) => {\r\n                //isFetching setToogle\r\n                props.setUserProfile(res.data)\r\n\r\n            })\r\n    },[])\r\n    return <div className={s.content}>\r\n        <Profile {...props} profile={props.profile}/>\r\n\r\n    </div>\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst MSTP=(state:RootState)=>{\r\n    return{\r\nprofile: state.profilePage.profile\r\n}\r\n}\r\nlet ProfileContainerWithUrl=withRouter(ProfileContainer)\r\nexport default connect<MSTPType, MDTPType, {}, RootState>(MSTP,{setUserProfile})(ProfileContainerWithUrl)\r\n\r\n\r\n","D:\\react\\itincubator\\socialTC\\social-ts\\src\\redux\\Auth-reducer.ts",["186","187","188","189","190"],"const SET_USER_DATA = \"SETUSERDATA\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SETUSERS = \"SETUSERS\"\r\nconst SETPAGE = \"SETAPGE\"\r\nconst SETTOTALCOUNT= \"SETTOTALCOUNT\"\r\nconst TOOGLE_IS_FETCHING= \"TOOGLEISFETCHING\"\r\n\r\n\r\ntype SETUSERDATAType = {\r\n    type: typeof SET_USER_DATA\r\n    data: any\r\n}\r\n\r\n// export type returnStateUserreducerType = ReturnType<typeof initialState>\r\nconst initialState: inittype  = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isFetching: true\r\n}\r\nexport type inittype = AuthType & {isFetching: boolean}\r\n\r\n\r\nexport type AuthType={\r\n    id: string | null\r\n    email: string | null\r\n    login: string | null\r\n}\r\n\r\nexport type ActionsTypes = SETUSERDATAType\r\n// export type ActionsTypes = ReturnType<typeof AddPostAC> | ReturnType<typeof ChangePostTextAС>\r\n\r\nexport const SetuserData = (data:AuthType): SETUSERDATAType =>\r\n    ({type: SET_USER_DATA, data} as const)\r\n\r\nexport function AuthReducer(state: inittype = initialState, action: ActionsTypes): inittype {\r\n    switch (action.type) {\r\n        case \"SETUSERDATA\":\r\n            return {\r\n                ...state,...action.data\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\n\r\n",{"ruleId":"191","severity":1,"message":"192","line":11,"column":7,"nodeType":"193","messageId":"194","endLine":11,"endColumn":12},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"191","severity":1,"message":"199","line":5,"column":16,"nodeType":"193","messageId":"194","endLine":5,"endColumn":29},{"ruleId":"191","severity":1,"message":"200","line":5,"column":31,"nodeType":"193","messageId":"194","endLine":5,"endColumn":41},{"ruleId":"191","severity":1,"message":"201","line":14,"column":11,"nodeType":"193","messageId":"194","endLine":14,"endColumn":16},{"ruleId":"191","severity":1,"message":"202","line":15,"column":11,"nodeType":"193","messageId":"194","endLine":15,"endColumn":27},{"ruleId":"203","severity":1,"message":"204","line":30,"column":7,"nodeType":"205","endLine":30,"endColumn":9,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":35,"column":3,"nodeType":"209","endLine":35,"endColumn":85},{"ruleId":"191","severity":1,"message":"210","line":1,"column":29,"nodeType":"193","messageId":"194","endLine":1,"endColumn":38},{"ruleId":"191","severity":1,"message":"211","line":4,"column":9,"nodeType":"193","messageId":"194","endLine":4,"endColumn":21},{"ruleId":"191","severity":1,"message":"212","line":1,"column":8,"nodeType":"193","messageId":"194","endLine":1,"endColumn":13},{"ruleId":"191","severity":1,"message":"212","line":1,"column":8,"nodeType":"193","messageId":"194","endLine":1,"endColumn":13},{"ruleId":"191","severity":1,"message":"213","line":1,"column":16,"nodeType":"193","messageId":"194","endLine":1,"endColumn":27},{"ruleId":"191","severity":1,"message":"210","line":1,"column":29,"nodeType":"193","messageId":"194","endLine":1,"endColumn":38},{"ruleId":"191","severity":1,"message":"214","line":2,"column":8,"nodeType":"193","messageId":"194","endLine":2,"endColumn":9},{"ruleId":"191","severity":1,"message":"215","line":3,"column":9,"nodeType":"193","messageId":"194","endLine":3,"endColumn":13},{"ruleId":"191","severity":1,"message":"211","line":4,"column":9,"nodeType":"193","messageId":"194","endLine":4,"endColumn":21},{"ruleId":"191","severity":1,"message":"216","line":6,"column":18,"nodeType":"193","messageId":"194","endLine":6,"endColumn":27},{"ruleId":"191","severity":1,"message":"211","line":3,"column":9,"nodeType":"193","messageId":"194","endLine":3,"endColumn":21},{"ruleId":"191","severity":1,"message":"217","line":6,"column":9,"nodeType":"193","messageId":"194","endLine":6,"endColumn":17},{"ruleId":"191","severity":1,"message":"212","line":1,"column":8,"nodeType":"193","messageId":"194","endLine":1,"endColumn":13},{"ruleId":"191","severity":1,"message":"213","line":1,"column":16,"nodeType":"193","messageId":"194","endLine":1,"endColumn":27},{"ruleId":"191","severity":1,"message":"214","line":2,"column":8,"nodeType":"193","messageId":"194","endLine":2,"endColumn":9},{"ruleId":"191","severity":1,"message":"218","line":3,"column":48,"nodeType":"193","messageId":"194","endLine":3,"endColumn":57},{"ruleId":"191","severity":1,"message":"219","line":4,"column":9,"nodeType":"193","messageId":"194","endLine":4,"endColumn":19},{"ruleId":"191","severity":1,"message":"220","line":5,"column":9,"nodeType":"193","messageId":"194","endLine":5,"endColumn":16},{"ruleId":"191","severity":1,"message":"217","line":6,"column":9,"nodeType":"193","messageId":"194","endLine":6,"endColumn":17},{"ruleId":"191","severity":1,"message":"221","line":12,"column":6,"nodeType":"193","messageId":"194","endLine":12,"endColumn":21},{"ruleId":"207","severity":1,"message":"208","line":8,"column":13,"nodeType":"209","endLine":8,"endColumn":91},{"ruleId":"195","replacedBy":"222"},{"ruleId":"197","replacedBy":"223"},{"ruleId":"191","severity":1,"message":"224","line":4,"column":9,"nodeType":"193","messageId":"194","endLine":4,"endColumn":16},{"ruleId":"191","severity":1,"message":"211","line":6,"column":9,"nodeType":"193","messageId":"194","endLine":6,"endColumn":21},{"ruleId":"191","severity":1,"message":"225","line":6,"column":23,"nodeType":"193","messageId":"194","endLine":6,"endColumn":31},{"ruleId":"207","severity":1,"message":"208","line":16,"column":14,"nodeType":"209","endLine":16,"endColumn":96},{"ruleId":"207","severity":1,"message":"208","line":20,"column":13,"nodeType":"209","endLine":20,"endColumn":52},{"ruleId":"207","severity":1,"message":"208","line":21,"column":13,"nodeType":"209","endLine":21,"endColumn":52},{"ruleId":"226","severity":1,"message":"227","line":8,"column":64,"nodeType":"228","messageId":"229","endLine":8,"endColumn":65},{"ruleId":"191","severity":1,"message":"230","line":6,"column":13,"nodeType":"193","messageId":"194","endLine":6,"endColumn":18},{"ruleId":"207","severity":1,"message":"208","line":20,"column":26,"nodeType":"209","endLine":24,"endColumn":23},{"ruleId":"195","replacedBy":"231"},{"ruleId":"197","replacedBy":"232"},{"ruleId":"191","severity":1,"message":"233","line":77,"column":5,"nodeType":"193","messageId":"194","endLine":77,"endColumn":21},{"ruleId":"191","severity":1,"message":"199","line":13,"column":16,"nodeType":"193","messageId":"194","endLine":13,"endColumn":29},{"ruleId":"191","severity":1,"message":"200","line":13,"column":31,"nodeType":"193","messageId":"194","endLine":13,"endColumn":41},{"ruleId":"191","severity":1,"message":"234","line":1,"column":29,"nodeType":"193","messageId":"194","endLine":1,"endColumn":38},{"ruleId":"191","severity":1,"message":"235","line":7,"column":44,"nodeType":"193","messageId":"194","endLine":7,"endColumn":58},{"ruleId":"191","severity":1,"message":"236","line":9,"column":8,"nodeType":"193","messageId":"194","endLine":9,"endColumn":13},{"ruleId":"191","severity":1,"message":"237","line":10,"column":9,"nodeType":"193","messageId":"194","endLine":10,"endColumn":22},{"ruleId":"191","severity":1,"message":"238","line":10,"column":24,"nodeType":"193","messageId":"194","endLine":10,"endColumn":32},{"ruleId":"191","severity":1,"message":"239","line":10,"column":34,"nodeType":"193","messageId":"194","endLine":10,"endColumn":42},{"ruleId":"191","severity":1,"message":"240","line":12,"column":6,"nodeType":"193","messageId":"194","endLine":12,"endColumn":22},{"ruleId":"191","severity":1,"message":"241","line":27,"column":7,"nodeType":"193","messageId":"194","endLine":27,"endColumn":18},{"ruleId":"191","severity":1,"message":"242","line":28,"column":11,"nodeType":"193","messageId":"194","endLine":28,"endColumn":19},{"ruleId":"207","severity":1,"message":"208","line":44,"column":22,"nodeType":"209","endLine":47,"endColumn":19},{"ruleId":"207","severity":1,"message":"208","line":8,"column":53,"nodeType":"209","endLine":8,"endColumn":75},{"ruleId":"191","severity":1,"message":"199","line":3,"column":16,"nodeType":"193","messageId":"194","endLine":3,"endColumn":29},{"ruleId":"191","severity":1,"message":"200","line":3,"column":31,"nodeType":"193","messageId":"194","endLine":3,"endColumn":41},{"ruleId":"191","severity":1,"message":"243","line":8,"column":9,"nodeType":"193","messageId":"194","endLine":8,"endColumn":20},{"ruleId":"191","severity":1,"message":"244","line":9,"column":9,"nodeType":"193","messageId":"194","endLine":9,"endColumn":16},{"ruleId":"203","severity":1,"message":"245","line":44,"column":7,"nodeType":"205","endLine":44,"endColumn":9,"suggestions":"246"},{"ruleId":"191","severity":1,"message":"247","line":2,"column":7,"nodeType":"193","messageId":"194","endLine":2,"endColumn":15},{"ruleId":"191","severity":1,"message":"248","line":3,"column":7,"nodeType":"193","messageId":"194","endLine":3,"endColumn":15},{"ruleId":"191","severity":1,"message":"249","line":4,"column":7,"nodeType":"193","messageId":"194","endLine":4,"endColumn":14},{"ruleId":"191","severity":1,"message":"250","line":5,"column":7,"nodeType":"193","messageId":"194","endLine":5,"endColumn":20},{"ruleId":"191","severity":1,"message":"251","line":6,"column":7,"nodeType":"193","messageId":"194","endLine":6,"endColumn":25},"@typescript-eslint/no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["252"],"no-negated-in-lhs",["253"],"'AxiosResponse' is defined but never used.","'AxiosError' is defined but never used.","'login' is assigned a value but never used.","'NewDialogMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["254"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'RefObject' is defined but never used.","'ActionsTypes' is defined but never used.","'React' is defined but never used.","'ChangeEvent' is defined but never used.","'s' is defined but never used.","'Post' is defined but never used.","'PostsType' is defined but never used.","'Simulate' is defined but never used.","'StoreType' is defined but never used.","'DialogItem' is defined but never used.","'Message' is defined but never used.","'DialogsPageType' is defined but never used.",["252"],["253"],"'Myposts' is defined but never used.","'PostType' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'axios' is defined but never used.",["252"],["253"],"'initialStateType' is assigned a value but never used.","'useEffect' is defined but never used.","'NewMessageType' is defined but never used.","'Axios' is defined but never used.","'setTotalCount' is defined but never used.","'SetUsers' is defined but never used.","'userType' is defined but never used.","'DialogsPagesType' is defined but never used.","'currentPage' is assigned a value but never used.","'pageSize' is assigned a value but never used.","'ProfileType' is defined but never used.","'compose' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["255"],"'UNFOLLOW' is assigned a value but never used.","'SETUSERS' is assigned a value but never used.","'SETPAGE' is assigned a value but never used.","'SETTOTALCOUNT' is assigned a value but never used.","'TOOGLE_IS_FETCHING' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},"Update the dependencies array to be: [dispatch]",{"range":"260","text":"261"},"Update the dependencies array to be: [props]",{"range":"262","text":"263"},[1029,1031],"[dispatch]",[1125,1127],"[props]"]